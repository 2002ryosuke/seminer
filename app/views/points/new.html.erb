<!DOCTYPE>

<html>

	<head>
		<title>cytoscape-automove.js demo</title>

		<meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1, maximum-scale=1">

		<script src="https://unpkg.com/cytoscape/dist/cytoscape.min.js"></script>

		<!-- for testing with local version of cytoscape.js -->
		<!--<script src="../cytoscape.js/build/cytoscape.js"></script>-->

		<%# <script src="cytoscape-automove.js"></script> %>
		<script>
			document.addEventListener('DOMContentLoaded', function(){

				var cy = window.cy = cytoscape({
					container: document.getElementById('cy'),

					layout: {
						name: 'preset'
					},

					style: [
						{
							selector: 'node',
							style: {
								'label': 'data(id)'
							}
						},

						{
							selector: '.mid',
							style: {
								'width': 8,
								'height': 8,
								'label': ''
							}
						}
					],

					elements: [
						{ data: { id: 'a' } },
						{ data: { id: 'b' } },
						{ data: { id: 'c' } },
						{ data: { id: 'mid' }, classes: 'mid' },
						{ data: { source: 'a', target: 'mid' } },
						{ data: { source: 'b', target: 'mid' } },
						{ data: { source: 'mid', target: 'c' } },

						{ data: { id: 'd' } },

						{ data: { id: 'e' } },
						{ data: { id: 'f' } },
						{ data: { source: 'e', target: 'f' } },

						{ data: { id: 'g' } },

						{ data: { id: 'h' } },
						{ data: { id: 'i' } },
						{ data: { source: 'h', target: 'i' } },

						{ data: { id: 'j' } },

						{ data: { id: 'k' } },
						{ data: { id: 'm' } },
						{ data: { id: 'n' } },
						{ data: { source: 'k', target: 'm' } },
						{ data: { source: 'k', target: 'n' } },
						{ data: { source: 'm', target: 'n' } },
					]
				});

				// a, b, c; with mid in the middle

				cy.$('#a, #b, #c').makeLayout({
					name: 'circle',
					boundingBox: {
						x1: 0,
						y1: 0,
						x2: 300,
						y2: 300
					}
				}).run();


				// dragging mid drags its neighbourhood with it
		
				// d can't go out of a box

				cy.$('#d').position({ x: 400, y: 150 });


				// e & f have the same y

				var eAndF = cy.$('#e, #f');

				eAndF.makeLayout({
					name: 'grid',
					boundingBox: { x1: 0, x2: 300, y1: 300, y2: 400 },
					cols: 2,
					fit: false
				}).run();


				// g kept in viewport

				cy.$('#g').position({ x: 400, y: 350 });

				cy.fit( 100 ); // make sure g is in the viewport for the demo


				// i gets pulled along with h on drag

				cy.$('#h').position({ x: 585, y: 195 });
				cy.$('#i').position({ x: 510, y: 260 });


				// j can't go in the box of d

				cy.$('#j').position({ x: 585, y: 350 });


				// k, m, n all move together on drag as a unit (e.g. cluster)

				cy.$('#k').position({ x: 430, y: -20 });
				cy.$('#m').position({ x: 490, y: -110 });
				cy.$('#n').position({ x: 550, y: -20 });				

				cy.fit( 100 ); // fit to all the layouts


				// .automove-viewport nodes kept in viewport (even if added after this call)
				// convenient but less performant than `nodesMatching: collection`

				cy.on('tap', function( evt ){
					var tgt = evt.target || evt.cyTarget; // 3.x || 2.x

					if( tgt === cy ){
						cy.add({
							classes: 'automove-viewport',
							data: { id: 'new' + Math.round( Math.random() * 100 ) },
							position: {
								x: evt.position.x,
								y: evt.position.y
							}
						});
					}
				});

				cy.on('cxttap', 'node', function( evt ){
					var tgt = evt.target || evt.cyTarget; // 3.x || 2.x

					tgt.remove();
				});

			});
		</script>
	</head>

	<body>
		<h1>cytoscape-automove demo</h1>

		<div id="cy"></div>

	</body>

</html>