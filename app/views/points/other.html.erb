<h1>cytoscape-automove demo</h1>
<div id="cy"></div>
	
<script src="https://unpkg.com/cytoscape/dist/cytoscape.min.js">
	
	console.log()
</script>

<script type='module'>
	import { FetchRequest } from '@rails/request.js'


	<% if @points.size == 0 && @lines.size == 0 %>
		<% count_point = 0 %>
		<% count_line = 0 %>
	<% elsif @points.size != 0 && @lines.size == 0 %>
		<% count_point = @points.last.id %>
		<% count_line = 0 %>
	<% else %>
		<% count_point = @points.last.id %>
		<% count_line = @lines.last.id %>
	<% end %>

	let count_point = <%= count_point %>
	let count_line = <%= count_line %>
	
	
	<% lines_json = JSON.parse(@lines.to_json) %>	
	
	document.addEventListener('DOMContentLoaded', function(){
		var cy = window.cy =
		cytoscape({
			container: document.getElementById('cy'),

				elements: {
					nodes: [
						<% @points.each do |i| %>
						{
							data: { id: 'Z'+<%= i.id %>},
							position: { x: <%= i.x %>, y: <%= i.y %> }
						},
						<% end %>
					],
					edges: [
						<% lines_json.each do |n| %>
						{
							data: { id: <%= n.values[0] %>, source: 'Z' + <%= n.values[1].values[0] %>, target: 'Z' + <%= n.values[2].values[0] %>}
						},
						<% end %>
					]
					// edges: [
					// 	<% @lines.each do |i| %>
					// 	{
					// 		data: { id: <%= i.id %>, source: 'Z'+<%= i.source %>, target: 'Z'+<%= i.target %> }
					// 	},
					// 	<% end %>
					// ]
				},

				style: [
					{
						selector: 'node',
						style: {
							'label': 'data(id)',
							'color': '#008b8b'
						}
					},

					{
						selector: 'edge',
						style: {
							'label': 'data(id)',
							'color': '#008b8d',
							// 'target-arrow-shape': 'triangle', 	有効グラフになる
							'curve-style': 'bezier', //線を曲線にする
						}
					}
				],
				layout: {
					name: 'preset',
				}
			});
			var a = <%= raw @lines.to_json %>
			// <% @lines.each do |n| %>
			// 	id: <%= n.id %>, source: <%= n.source %>, target: <%= n.target %>;
			// <% end %>
			var nodes = [];
			cy.on('click', function( evt ){
				var tgt = evt.target;
				const x = evt.position.x
				const y = evt.position.y

				// if( tgt === cy ){
				// 	fetch('/posits', {
				// 		method: 'POST',
				// 		headers: {
				// 			'Content-Type': 'application.json',
				// 			'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
				// 		},
				// 		body: JSON.stringify({ point: {x: x, y: y} })
				// 	}).then(response => response.json())
				// 	  .then(data => console.log('Point saved', data))
				// 	  .catch(error => console.error('Error:', error));
				if ( tgt === cy ) {
					nodes = [];
					count_point++;
					// cyをタップした場合は、ノードを追加
					
					async function createPoint() {
						const request = new FetchRequest('post', '/points', {
         					body: JSON.stringify({ point: { x: x, y: y } }),
          					contentType: 'application/json', // リクエストがJSONであることを指定
        			});


					const response = await request.perform()
					if (response.ok) {
						const body = await response.text
					}
					window.location.reload();
				}
				createPoint();

				//点の作成
				cy.add({
					classes: 'automove-viewport',
					group: 'nodes',
					data: { id: 'Z' + count_point },
					position: {
						x: evt.position.x,
						y: evt.position.y
					}
				});

				} else {
					// ノードをタップした場合
				cy.nodes().once('click', function(e){
  					var ele = e.target;
					nodes.push(ele.id());
					console.log(nodes);
  					// console.log('clicked ' + ele.id());
					if ( nodes.length == 2 ) {
						count_line++;
						let nodes_num = []; 
						//nodesの中のZをはずして、数字だけにする
						for (let i = 0; i < nodes.length; i++) {
							const node = nodes[i];
							const node_num_arry = node.match(/\d+/); 
							let [node_num] = node_num_arry;
							nodes_num.push(node_num);
						}
						console.log(nodes_num);
						
						//node_numにある数字とPoint（データベース）のidに入れ替える
						// function conversion(node_num) {
						// // <% def conversion(node_num) %>
						// 	const conversion_node = [];
						// 	<% node_num.each do |n| %>
						// 		<% @points.each do |i| %>
						// 			<% if i.id == n %> 
						// 				conversion_node.push(<%= i.id %>);
						// 			<% end %>
						// 		<% end %>
						// 	<% end %>
						// return conversion_node
						// // <% end %>
						// };
						
						// const conversion_node = conversion(nodes_num);
						// console.log(conversion_node);

						async function createLine() {
							const request = new FetchRequest('post', '/lines', {
								body: JSON.stringify({ line: {source_id: nodes_num[0], target_id: nodes_num[1] } }),
								contentType: 'application/json',
							});
							const response = await request.perform()
							if (response.ok) {
								const body = await response.text
							}
						}
						createLine();

						//線の作成
						cy.add({
							group: 'edges',
							data: { id: count_line, source: nodes[0], target: nodes[1] }
						});
						nodes = [];
						nodes_num = [];
					}
				});
				};
			});
			//点の削除
			//2本指でタップ
			cy.on('cxttap', 'node', function( evt ){
				//ここでlineの中のデータベースも精査
				var tgt = evt.target;
				console.log(tgt);
				console.log(tgt.id());
				let tgt_id = tgt.id().match(/\d+/);
				console.log(tgt_id);

				if (tgt_id == null){
					console.log('null');
				} else {
				let [point_delete] = tgt_id;
				console.log(point_delete);
				async function deletePoint(point_delete) {
					const request = new FetchRequest('delete', '/points/' + point_delete, {
						// contentType: 'application/json',
					});
					const response = await request.perform()
					if (response.ok) {
						console.log('delete success');
					}
				}
				deletePoint(point_delete);
				tgt.remove(evt);
				//deleteメゾット
				}
			});
		});		
</script>